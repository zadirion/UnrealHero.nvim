#  makes it so it inherits c snippets
# tha are defined here
# :call UltiSnips#RefreshSnippets()
extends c

priority 100

snippet deffun
${1:rettype} ${3:${4:`!v expand("%:t:r")`}::}${5:FuncName}(${6:const }${7:ArgType}${8|&,*|} ${9:ArgName})
\{
	${VISUAL}
	$0
\}
endsnippet

global !p
def remove_semicolon(snip):
	import vim
	clipboard_content = snip.v.text or '' 
	if clipboard_content.endswith(';'):
		snip.rv = snip.rv[:-1]
endglobal

snippet {
\{
	${VISUAL}$0
\}
endsnippet

snippet if
if (${2:`!p
stripped = snip.v.text.strip()
if stripped.endswith(';'):
	snip.rv = stripped[:-1] 
	`}) 
{
	${3:${VISUAL}}
}
endsnippet

snippet case
	case ${1:word} in
		${2:pattern} ) $0;;
	esac
endsnippet

snippet class 
class $1
{
public:
	${2:$1($3)
	{
	}}
};
endsnippet

snippet copyc
$1(const $1& Other){this->operator=(Other);}
$1($1&& Other){}
operator=($1&& Other){}
~$1(){}
endsnippet


snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet templ|tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
$0
endsnippet

snippet tmap "TMap (map)"
TMap<${1:key}, ${2:value}> map$0;
endsnippet

snippet tarray 
TArray<${1:char}> v$0;
endsnippet

snippet [] "lambda" i

	[$2]($3)
	{
		${VISUAL}$0
	}${1:);}
endsnippet
